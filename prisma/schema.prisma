generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(cuid())
  email          String     @unique
  name           String?
  emailVerified  DateTime?
  image          String?
  googleId       String?    @unique
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relations for NextAuth
  accounts       Account[]
  sessions       Session[]

  // Your application relations
  ratings        Rating[]   @relation("RatedBy")
  receivedRatings Rating[]  @relation("RatedUser")
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Rating {
  id            String   @id @default(cuid())
  value         Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  userId        String
  user          User     @relation("RatedBy", fields: [userId], references: [id], onDelete: Cascade)
  
  ratedUserId   String
  ratedUser     User     @relation("RatedUser", fields: [ratedUserId], references: [id], onDelete: Cascade)

  @@unique([userId, ratedUserId])
}
